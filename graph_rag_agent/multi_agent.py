from langgraph.prebuilt import create_react_agent
from langgraph_supervisor import create_supervisor
from langchain_core.tools import tool
from .research import graph_rag
from .fact_check import search_fact_checks
from .cofacts_check import search_cofacts
from .word_similarity import find_most_similar_cofacts_article
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import MessagesState
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from .llm import llm_GPT, llm_gemini
from .SearchTool import SearchTools
import logging
from typing import Literal
import sys

if sys.platform == "win32":
    import os
    os.system("chcp 65001 >nul")

# Setup logging for detailed agent activity tracing
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("Supervisor")
memory = MemorySaver()

graphrag_logger = logging.getLogger("GraphRAG_Agent")
factcheck_logger = logging.getLogger("FactCheck_Agent")

class AgentState(MessagesState):
    FactChecked: bool = False

@tool("graphrag_tool")
def graphrag_tool(query: str) -> str:
    """Use GraphRAG to answer the user's medical question."""
    graphrag_logger.info(f"[TOOL] ÂïüÁî®ÂúñË≠úÂïèÁ≠îÂ∑•ÂÖ∑ÔºåÂïèÈ°å: {query}")
    result = graph_rag(input=query)
    if not result.strip():
        fallback = (
            "ÁõÆÂâçÊâæ‰∏çÂà∞ÂÖ∑È´îË≥áÊñôÔºå‰ΩÜÊ†πÊìöÂ∏∏Ë¶ãÊÉÖÊ≥ÅÔºåÈÄôÂèØËÉΩËàá‰ª•‰∏ãÂõ†Á¥†ÊúâÈóúÔºö"
            "ËÖ∏ËÉÉ‰∏çÈÅ©„ÄÅÂ£ìÂäõ„ÄÅÈ£üÁøí‰∏çË¶èÂâáÁ≠â„ÄÇ"
            "Âª∫Ë≠∞ÔºöË£úÂÖÖÊ∞¥‰ªΩ„ÄÅÊ∏ÖÊ∑°È£üÁøí„ÄÅÈÅ©Áï∂‰ºëÊÅØ„ÄÇ"
            "Ëã•ÁóáÁãÄÊÇ™ÂåñÊàñÊåÅÁ∫åÔºåË´ãÂÑòÈÄüÂ∞ãÊ≤ª„ÄÇ"
        )
        graphrag_logger.warning("[TOOL] ÁÑ°Ë≥áÊñôÂõûÂÇ≥ÔºåÊèê‰æõ fallback Âª∫Ë≠∞")
        return fallback
    return result

@tool("google_fact_check_tool")
def google_fact_check_tool(query: str, state: AgentState) -> str:
    """Check factual claims using Google FactCheck API."""
    factcheck_logger.info(f"[TOOL] ÂïüÁî®‰∫ãÂØ¶Êü•Ê†∏Â∑•ÂÖ∑ÔºåÊü•Ë©¢: {query}")
    fact = search_fact_checks(query)
    result = ""
    if fact:
        if 'claims' in fact:
            result += f"ÊâæÂà∞ {len(fact['claims'])} Á≠ÜÂØ©Êü•ÁµêÊûú:\n"
            for claim in fact['claims']:
                result += f"- ËÅ≤Êòé: {claim.get('text')}\n"
                if 'claimReview' in claim and claim['claimReview']:
                    for review in claim['claimReview']:
                        result += f"  ÂØ©Êü•ÂñÆ‰Ωç: {review.get('publisher', {}).get('name')}\n"
                        result += f"  ÂØ©Êü•ÁµêÊûú: {review.get('textualRating')}\n"
                        result += f"  ‰æÜÊ∫êÈÄ£Áµê: {review.get('url')}\n"
                result += "-" * 20 + "\n"
            state["FactChecked"] = True
        else:
            result += "Êü•ÁÑ°Áõ∏ÈóúÂØ©Êü•ÁµêÊûú\n"
    return result

@tool("cofacts_tool")
def cofacts_tool(query: str, state: AgentState) -> str:
    """Use Cofacts to find similar rumor reports and replies."""
    factcheck_logger.info(f"[TOOL] ÂïüÁî®ÂÖ±Ë≠∞Êü•Ê†∏Â∑•ÂÖ∑ÔºåÊü•Ë©¢: {query}")
    node, score = find_most_similar_cofacts_article(query)
    if not node:
        return "‚ùå Êü•ÁÑ°ËàáÊ≠§Ë®äÊÅØÁõ∏Á¨¶ÁöÑË≥áÊñô"

    response = f"üìò ÊúÄÁõ∏‰ººÁöÑCofactsÊñáÁ´†Ôºö\n{node['text']}\n\n"
    if node.get("aiReplies"):
        response += "ü§ñ AI ÂõûÊáâÔºö\n"
        for r in node['aiReplies']:
            response += f"- {r['text']}\n"
    if node.get("articleReplies"):
        response += "üßë ‰∫∫Â∑•ÂõûÊáâÔºö\n"
        for r in node['articleReplies']:
            response += f"- {r['reply']['text']}\n"

    state["FactChecked"] = True
    return response

@tool("should_continue")
def should_continue(state: AgentState) -> Literal["GraphRAG","__end__"]:
    """Determine whether to continue to GraphRAG or end based on FactChecked state."""
    logger.info(f"[SUPERVISOR] FactChecked = {state['FactChecked']}")
    return "__end__" if state['FactChecked'] else "GraphRAG"

@tool("google_map_search_tool")
def google_map_search_tool(query: str) -> str:
    """Search for nearby clinics, hospitals, or pharmacies using Google Maps."""
    graphrag_logger.info(f"[TOOL] Êü•Ë©¢ÈôÑËøë‰ΩçÁΩÆ: {query}")
    return SearchTools.Google_Map(query)

@tool("google_search_tool")
def google_search_tool(query: str) -> str:
    """Use Google Search to retrieve general web information."""
    graphrag_logger.info(f"[TOOL] Êü•Ë©¢Á∂≤È†ÅË≥áË®ä: {query}")
    return SearchTools.Google_Search(query)

graphrag_agent = create_react_agent(
    model=llm_gemini,
    tools=[graphrag_tool, google_map_search_tool, google_search_tool],
    name="graphrag_agent",
    prompt="""
    You are a medical expert providing information about medical symptoms and chronic conditions.
    Be as helpful as possible and return as much information as possible.
    Always respond in Traditional Chinese.

    You MUST use the GraphRAG tool to answer any health-related question.
    Never rely on your own knowledge ‚Äî always call a tool first.
    Never say "ÊàëÁÑ°Ê≥ïÊèê‰æõÈÜ´ÁôÇÂª∫Ë≠∞" unless it's a life-threatening emergency.
    Provide fallback based on general medical knowledge if tool result is empty.

    When replying:
    - Use paragraphs to explain causes or conditions
    - Use bullet points for actions, remedies, tips
    - Use markdown tables if comparing things (e.g., symptoms vs. action)
    - Encourage users, and ask follow-up questions when helpful
    """
)

fact_check_agent = create_react_agent(
    model=llm_gemini,
    tools=[google_fact_check_tool, cofacts_tool],
    name="fact_check_agent",
    prompt="""
    You are a fact-checking assistant.
    Always respond in Traditional Chinese.
    Only use available tools to verify factual claims.
    Do not answer based on your own knowledge.
    """
)

supervisor = create_supervisor(
    agents=[graphrag_agent, fact_check_agent],
    tools=[should_continue],
    model=llm_gemini,
    prompt="""
    You are the supervisor managing multi-agent interaction.
    Task:
        - Always delegate to graphrag_agent first.
        - Then to fact_check_agent if needed.
        - Output only the final helpful message.
    """
)

app = supervisor.compile(checkpointer=memory)
logger.info("‚úÖ Supervisor app compiled and ready.")

def filter_agent_messages(message_list):
    ignore_prefixes = [
        "Successfully transferred", "Transferring back", "Entering new AgentExecutor chain..."
    ]
    return [
        m.content for m in message_list
        if isinstance(m, AIMessage)
        and m.content
        and not any(m.content.strip().startswith(p) for p in ignore_prefixes)
    ]

app.filter_messages = filter_agent_messages